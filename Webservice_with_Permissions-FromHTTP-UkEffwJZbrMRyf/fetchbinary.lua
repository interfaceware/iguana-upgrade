-- TODO - not the most beautifully factored piece of code I have ever written.  Could be broken apart into smaller pieces.

cron = require 'cron.edit'

local RootDir = os.getenv('HOME')..'/'

local function VersionString(Version)
   -- TODO check format and throw error if it is wrong
   if not Version then
      error("Need version")
   end
   return Version:gsub("%.", "_")
end

local function AppDir()
   return RootDir..'iguana_app/'
end

local function AppVersionDir(Version)
   return AppDir() .. Version..'/'
end

local function CreateDir(Dir)
   local Stats = os.fs.stat(Dir)
   if Stats == nil then
      trace("Create tar ball dir")
      os.fs.mkdir(Dir, 700)
   end
   Stats = os.fs.stat(Dir)
   if not Stats.isdir then
      error(Dir.. ' is not a directory')
   end
end

local HdfScript=[[
application{
   service_kill_timeout = 500000
   service_display_name=iNTERFACEWARE Iguana
   service_name=Iguana
   service_description=Integration Engine
   command_line_unix=./iguana --working_dir #WORKING_DIR
}
]]

function WriteHdfFile(Version)
   local C = HdfScript:gsub("#WORKING_DIR", iguana.workingDir())
   trace(C)
   local HdfFileName = AppVersionDir(Version)..'iguana_service.hdf'
   trace(HdfFileName)
   if not iguana.isTest() then
      local F=io.open(HdfFileName, "w")
      F:write(C)
      F:close()
   end
end

function Fetch(R,A)
   local Version = VersionString(R.params.version)
   CreateDir(AppDir())
   CreateDir(AppVersionDir(Version))

   local Path = 'http://dl.interfaceware.com/iguana/linux/'..Version..'/iguana_'..Version..'_linux_centos5_x64.tar.gz'   
   trace(Path)
   -- I use curl to download the tar ball and expand it on the fly using a pipe.  
   local Command = "curl "..Path.." | tar -zx --strip-components=1 -C "..AppVersionDir(Version)
   trace(Command)
   if not iguana.isTest() then 
      os.execute(Command)
   end
   WriteHdfFile(Version)
   -- Old skool HTTP refresh.
   AdminStatus(R,A)
end

function CurrentVersion()
   local T = iguana.version()
   return T.major .. "." .. T.minor.."."..T.build
end

function Delete(R, A)
   local Version = VersionString(R.params.version)
   if CurrentVersion() == Version:gsub("%_", ".") then
      return AdminStatus(R,A)
      --error("Not allowed to delete current version")     
   end
   local AppDir = AppVersionDir(Version)
   
   if not os.fs.stat(AppDir) then
      return AdminStatus(R,A)
      --error("This version is not installed.")
   end
   local Command = "rm -rf "..AppDir
   trace(Command)
   if not iguana.isTest() then
      os.execute(Command)
   end
   
   AdminStatus(R,A)
end

local StartScript=[=[
#!/bin/bash
# WARNING - this file was autogenerated by the Iguana Linux Update Utility
# This should be in the crontab (i.e. crontab -e)
# */5 * * * * #ROOT#iguana_start.sh

pidof iguana > /dev/null
if [[ $? -ne 0 ]]; then
  #RUN_COMMAND#
fi
]=]

function WriteStartScript(Version)
   local Dir = AppVersionDir(Version)
   local Content = StartScript
   Content = Content:gsub("#ROOT#", RootDir)
   local Command = "cd "..Dir.." && ./iguana_service"
   trace(Command)
   Content = Content:gsub("#RUN_COMMAND#", Command)
   trace(Content)
   if not iguana.isTest() then
      local F = io.open(RootDir.."iguana_start.sh", "w")
      F:write(Content)
      F:close()
      os.fs.chmod(RootDir.."iguana_start.sh", 700)
   end
end

local RebootScreen=[[
<p>
This Iguana is being shutdown.  In about a minute the new version should be started. 
</p>
<p>
Go to <a href='#URL'>#URL</a>
</p>
]]

function Activate(R,A)
   local Version = VersionString(R.params.version)
   if CurrentVersion() == Version:gsub("%_", ".") then
      return AdminStatus(R,A)
      --error("This is the current version!")     
   end
   local AppDir = AppVersionDir(Version)
   
   if not os.fs.stat(AppDir) then
      return AdminStatus(R,A)
      --error("This version is not installed.")
   end
   -- We could do more checks for the validity of the install
   -- we are changing over to.
   WriteStartScript(Version)
   local DashboardUrl = "http://"..
       R.headers.Host:gsub(iguana.webInfo().https_channel_server.port, 
         iguana.webInfo().web_config.port)..'/'
   trace(DashboardUrl)
   InstallCron()
   net.http.respond{body=RebootScreen:gsub("#URL", DashboardUrl)}
   
   if not iguana.isTest() then
      -- this does a graceful shut down.  The cron job should restart Iguana
      os.execute("killall iguana_service")
   end   
end

local Html=[[
<h1>Iguana upgrade utility.</h1>

<table border=1>
<tr><th>Version</th><th>Current</th><th>Downloaded</th><th>Remove</th><th>Activate</th></tr>
]]

function AdminStatus(R, A)
   local Url = 'http://dl.interfaceware.com/iguana/linux/'
   local R = net.http.get{url=Url, live=true}
   local I =  {}
   
   for K in R:rxmatch('href="(6[^/]*)/"') do
      trace(K)
      K = K:gsub("%_", ".")
      if not I[K] then
         I[K] = {}
      end 
   end
   trace(I) 
   for K,V in os.fs.glob(AppDir()..'*') do
      K = K:sub(#AppDir()+1):gsub("%_", ".")
      if not I[K] then
         I[K] = {}
      end 
      I[K].downloaded = true     
   end
   trace(I)
   local C = CurrentVersion()
   if not I[C] then
      I[C] = {}
   end
   I[C].current = true
   
   local Keys = {}
   for K in pairs(I) do
      Keys[#Keys+1] = K
   end
   table.sort(Keys)
   trace(Keys)
   
   
   local B = Html
   for i=1, #Keys do
      local Version = Keys[i]
      local E = I[Version]
      B = B .. '<tr><td>'..Keys[i]..'</td><td>'
      if E.current then
         B = B.."current"
      end
      B = B .. "</td><td>"
      if E.downloaded then 
         B = B.."Yes"
      else
         B = B.."<a href='fetch?version="..Version.."'>No</a>"
      end
      B = B .. "</td><td>"
      if E.downloaded and not E.current then
         B = B.."<a href='delete?version="..Version.."'>Delete?</a>"
      end
      B = B .. "</td><td>"
      if not E.current and E.downloaded then
         B = B.."<a href='activate?version="..Version.."'>Activate?</a>"
      end
      B = B..'</td></tr>\n'
   end
   B = B .. "</table>"
   
   net.http.respond{body=B}   
end

local CronLine =  '*/1 * * * * '..RootDir..'iguana_start.sh  # Start Iguana if not started'

function InstallCron()
   local OldCron = cron.read()
   local Lines = OldCron:split("\n")
   for i=1,#Lines do
      if Lines[i] == CronLine then
         return "Crontab is already installed."
      end
      if Lines[i]:find("iguana_start.sh") then
         Lines[i] = ''
      end
   end
   trace(Lines)
   Lines[#Lines+1] = CronLine
   local NewCron = table.concat(Lines, '\n')
   NewCron = NewCron:gsub("\n\n", "").."\n"
   trace(NewCron)
   cron.write(NewCron)
   return "Installed Crontab"
end

